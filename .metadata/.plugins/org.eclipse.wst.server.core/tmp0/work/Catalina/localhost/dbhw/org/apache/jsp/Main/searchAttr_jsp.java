/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.54
 * Generated at: 2020-12-25 04:41:19 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.Main;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.*;
import dbhw.DBConn;

public final class searchAttr_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("dbhw.DBConn");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=EUC-KR");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"EUC-KR\">\r\n");
      out.write("<title>Search Result</title>\r\n");
      out.write("</head>\r\n");

	//1. Connection
	Connection conn = DBConn.getMySqlConnection();

	String tableName = request.getParameter("search");
	String attribute = request.getParameter("selectAttr");
	String searchValue = request.getParameter("searchValue");
	ResultSet rs = null;
	PreparedStatement pstmt = null;
	
	// 2. SQL - 데이터 추가, 수정, 삭제 - 실행할 객체 생성 
	Statement stmt = conn.createStatement();
	
	if (tableName.equals("Customer")) {
		String sql = "select * from customer where "+ attribute + "='"+searchValue+"'";
		pstmt = conn.prepareStatement(sql);
		
		try{
			rs = pstmt.executeQuery();
			
			
			if (!rs.next()) {
				out.println("해당하는 고객 정보가 없습니다.");
				return ;
			} else {
				rs = pstmt.executeQuery();
			}
			
			
			out.print("<table border =" + "2 " + "width =" + "700 " + "align ="
	                + "center " + "bordercolor =" + "red " + "cellspacing ="
	                + "2 " + " bordercolor =" + "red >");
			out.print("<tr>");
	        out.print("<th>" + "name" + "</th>");
	        out.print("<th>" + "phone" + "</th>");
	        out.print("<th>" + "address" + "</th>");
	        out.print("<th>" + "gender" + "</th>");
	        out.print("</tr>");
			while(rs.next()) {
				String name = rs.getString("name");
				String phone = rs.getString("phone");
				String address = rs.getString("address");
				String gender = rs.getString("gender");
				
				out.print("<tr>");
				out.println("<td>" + name + "</td>");
		        out.println("<td>" + phone + "</td>");
		        out.println("<td>" + address + "</td>");
		        out.println("<td>" + gender + "</td>");
		        out.print("</tr>");
			}
			
		}catch(SQLException e){
		    out.println(e.toString());
		}
	}
	else if (tableName.equals("Transaction")) {
		String sql = "select * from transaction where "+ attribute + "='"+searchValue+"'";
		pstmt = conn.prepareStatement(sql);
		
		try{
			rs = pstmt.executeQuery();
			
			if (!rs.next()) {
				out.println("해당하는 거래 정보가 없습니다.");
				return ;
			} else {
				rs = pstmt.executeQuery();
			}
			
			out.print("<table border =" + "2 " + "width =" + "700 " + "align ="
	                + "center " + "bordercolor =" + "red " + "cellspacing ="
	                + "2 " + " bordercolor =" + "red >");
			out.print("<tr>");
	        out.print("<th>" + "transactionNumber" + "</th>");
	        out.print("<th>" + "productID" + "</th>");
	        out.print("<th>" + "price" + "</th>");
	        out.print("<th>" + "date" + "</th>");
	        out.print("<th>" + "customerName" + "</th>");
	        out.print("</tr>");
			while(rs.next()) {
				String transactionNumber = rs.getString("transactionNumber");
				String productID = rs.getString("productID");
				String price = rs.getString("price");
				String date = rs.getString("date");
				String customerName = rs.getString("customerName");
				
				out.print("<tr>");
				out.println("<td>" + transactionNumber + "</td>");
		        out.println("<td>" + productID + "</td>");
		        out.println("<td>" + price + "</td>");
		        out.println("<td>" + date + "</td>");
		        out.println("<td>" + customerName + "</td>");
		        out.print("</tr>");
			}
			
		}catch(SQLException e){
		    out.println(e.toString());
		}
	}
	else if (tableName.equals("Product")) {
		String sql = "select * from product where "+ attribute + "='"+searchValue+"'";
		pstmt = conn.prepareStatement(sql);
		
		try{
			rs = pstmt.executeQuery();
			
			if (!rs.next()) {
				out.println("해당하는 상품 정보가 없습니다.");
				return ;
			} else {
				rs = pstmt.executeQuery();
			}
			
			out.print("<table border =" + "2 " + "width =" + "700 " + "align ="
	                + "center " + "bordercolor =" + "red " + "cellspacing ="
	                + "2 " + " bordercolor =" + "red >");
			out.print("<tr>");
	        out.print("<th>" + "name" + "</th>");
	        out.print("<th>" + "productID" + "</th>");
	        out.print("<th>" + "supplierName" + "</th>");
	        out.print("</tr>");
			while(rs.next()) {
				String name = rs.getString("name");
				String productID = rs.getString("productID");
				String supplierName = rs.getString("supplierName");
				
				out.print("<tr>");
				out.println("<td>" + name + "</td>");
		        out.println("<td>" + productID + "</td>");
		        out.println("<td>" + supplierName + "</td>");
		        out.print("</tr>");
			}
			
		}catch(SQLException e){
		    out.println(e.toString());
		}
	}

      out.write("\r\n");
      out.write("<body>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
